# Neural Style Memory Book - GitHub Actions Workflow
# Automated deployment to GitHub Pages with security and performance checks

name: 🚀 Deploy Neural Style Memory Book

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
  
  # Trigger on pull requests to main
  pull_request:
    branches: [ main ]
  
  # Allow manual triggering
  workflow_dispatch:

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # ============================================================================
  # QUALITY CHECKS JOB
  # ============================================================================
  quality-checks:
    name: 🔍 Quality & Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔍 Check File Structure
      run: |
        echo "🔍 Verifying required files exist..."
        required_files=(
          "index.html"
          "manifest.json" 
          "sw.js"
          "css/variables.css"
          "css/styles.css"
          "css/queries.css"
          "js/script.js"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          else
            echo "✅ Found: $file"
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "❌ Missing required files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "🎉 All required files present!"
    
    - name: 🛡️ Security Scan
      run: |
        echo "🛡️ Running security checks..."
        
        # Check for potential security issues in HTML
        if grep -r "eval\|innerHTML.*user\|document\.write" --include="*.html" --include="*.js" .; then
          echo "⚠️ Potential security issues found - please review"
          exit 1
        fi
        
        # Check for hardcoded secrets (basic check)
        if grep -ri "api[_-]key\|password\|secret\|token" --include="*.js" --include="*.html" .; then
          echo "⚠️ Potential secrets found - please review"
          exit 1
        fi
        
        echo "✅ Basic security checks passed"
    
    - name: 📏 Code Quality Check
      run: |
        echo "📏 Checking code quality..."
        
        # Check file sizes (warn if very large)
        large_files=$(find . -name "*.js" -o -name "*.css" -o -name "*.html" | xargs wc -c | awk '$1 > 500000 {print $2 " (" $1 " bytes)"}')
        if [ -n "$large_files" ]; then
          echo "⚠️ Large files detected:"
          echo "$large_files"
          echo "Consider minification for production"
        fi
        
        # Check for TODO/FIXME comments
        todos=$(grep -r "TODO\|FIXME" --include="*.js" --include="*.css" --include="*.html" . || true)
        if [ -n "$todos" ]; then
          echo "📝 TODOs found (informational):"
          echo "$todos"
        fi
        
        echo "✅ Code quality check completed"

    - name: 🌐 Validate HTML
      run: |
        echo "🌐 Validating HTML structure..."
        
        # Basic HTML validation checks
        if ! grep -q "<!DOCTYPE html>" index.html; then
          echo "❌ Missing DOCTYPE declaration"
          exit 1
        fi
        
        if ! grep -q "<html lang=" index.html; then
          echo "❌ Missing language attribute"
          exit 1
        fi
        
        if ! grep -q 'rel="manifest"' index.html; then
          echo "❌ Missing PWA manifest link"
          exit 1
        fi
        
        echo "✅ HTML validation passed"

    - name: 📱 PWA Validation
      run: |
        echo "📱 Validating PWA configuration..."
        
        # Check manifest.json structure
        if ! command -v jq &> /dev/null; then
          echo "Installing jq for JSON validation..."
          sudo apt-get update && sudo apt-get install -y jq
        fi
        
        # Validate manifest.json
        if ! jq empty manifest.json; then
          echo "❌ Invalid JSON in manifest.json"
          exit 1
        fi
        
        # Check required PWA fields
        required_fields=("name" "short_name" "start_url" "display" "icons")
        for field in "${required_fields[@]}"; do
          if ! jq -e ".$field" manifest.json > /dev/null; then
            echo "❌ Missing required field in manifest: $field"
            exit 1
          fi
        done
        
        echo "✅ PWA configuration valid"

  # ============================================================================
  # PERFORMANCE TESTING JOB
  # ============================================================================
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🛠️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 📦 Install Dependencies
      run: |
        npm init -y
        npm install --save-dev http-server lighthouse
    
    - name: 🚀 Start Local Server
      run: |
        npx http-server . -p 8080 &
        echo $! > server.pid
        sleep 5
        
    - name: 🔍 Lighthouse Audit
      run: |
        echo "🔍 Running Lighthouse performance audit..."
        npx lighthouse http://localhost:8080 \
          --output=json \
          --output-path=lighthouse-report.json \
          --chrome-flags="--headless --no-sandbox" \
          --only-categories=performance,accessibility,best-practices,pwa
        
        # Parse results and check thresholds
        performance_score=$(jq '.categories.performance.score * 100' lighthouse-report.json)
        accessibility_score=$(jq '.categories.accessibility.score * 100' lighthouse-report.json)
        pwa_score=$(jq '.categories.pwa.score * 100' lighthouse-report.json)
        
        echo "📊 Lighthouse Scores:"
        echo "⚡ Performance: ${performance_score}%"
        echo "♿ Accessibility: ${accessibility_score}%"
        echo "📱 PWA: ${pwa_score}%"
        
        # Set minimum thresholds
        if (( $(echo "$performance_score < 80" | bc -l) )); then
          echo "❌ Performance score below threshold (80%)"
          exit 1
        fi
        
        if (( $(echo "$accessibility_score < 90" | bc -l) )); then
          echo "❌ Accessibility score below threshold (90%)"
          exit 1
        fi
        
        if (( $(echo "$pwa_score < 80" | bc -l) )); then
          echo "❌ PWA score below threshold (80%)"
          exit 1
        fi
        
        echo "✅ All performance thresholds met!"
        
    - name: 🧹 Cleanup
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi
        
    - name: 📊 Upload Lighthouse Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-report
        path: lighthouse-report.json

  # ============================================================================
  # DEPLOYMENT JOB
  # ============================================================================
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [quality-checks, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🏗️ Prepare Deployment
      run: |
        echo "🏗️ Preparing files for deployment..."
        
        # Create deployment directory
        mkdir -p deploy
        
        # Copy all necessary files
        cp -r css deploy/
        cp -r js deploy/
        cp index.html deploy/
        cp manifest.json deploy/
        cp sw.js deploy/
        
        # Copy documentation files
        cp README.md deploy/
        cp LICENSE deploy/
        
        # Add deployment timestamp
        echo "<!-- Deployed: $(date -u +"%Y-%m-%d %H:%M:%S UTC") -->" >> deploy/index.html
        
        echo "✅ Deployment preparation complete"
        
    - name: 🔧 Optimize for Production
      run: |
        echo "🔧 Applying production optimizations..."
        
        cd deploy
        
        # Remove development comments
        find . -name "*.js" -exec sed -i '/console\.log.*🔧.*Development/d' {} \;
        find . -name "*.js" -exec sed -i '/window\.debugApp/,+5d' {} \;
        
        # Update service worker cache name with timestamp
        timestamp=$(date +%s)
        sed -i "s/neural-style-memory-book-v1.2.0/neural-style-memory-book-v1.2.0-${timestamp}/g" sw.js
        
        echo "✅ Production optimizations applied"
        
    - name: 📄 Setup Pages
      uses: actions/configure-pages@v4
      
    - name: 📦 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: deploy
        
    - name: 🚀 Deploy to Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: 🎉 Deployment Success
      run: |
        echo "🎉 Deployment successful!"
        echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "📊 Deployment details:"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Branch: ${{ github.ref_name }}"
        echo "  - Actor: ${{ github.actor }}"
        echo "  - Timestamp: $(date -u)"

  # ============================================================================
  # POST-DEPLOYMENT VERIFICATION
  # ============================================================================
  verify-deployment:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🔍 Health Check
      run: |
        echo "🔍 Performing post-deployment health check..."
        
        # Wait for deployment to propagate
        sleep 30
        
        # Check if site is accessible
        site_url="https://dnoice.github.io/Neural-Style-Memory-Book/"
        
        if curl -f -s "$site_url" > /dev/null; then
          echo "✅ Site is accessible at $site_url"
        else
          echo "❌ Site is not accessible"
          exit 1
        fi
        
        # Check if manifest is accessible
        if curl -f -s "${site_url}manifest.json" > /dev/null; then
          echo "✅ PWA manifest is accessible"
        else
          echo "❌ PWA manifest is not accessible"
          exit 1
        fi
        
        # Check if service worker is accessible
        if curl -f -s "${site_url}sw.js" > /dev/null; then
          echo "✅ Service worker is accessible"
        else
          echo "❌ Service worker is not accessible"
          exit 1
        fi
        
        echo "🎉 All health checks passed!"

  # ============================================================================
  # NOTIFICATION JOB
  # ============================================================================
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [quality-checks, performance-test, deploy, verify-deployment]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📊 Deployment Summary
      run: |
        echo "📊 Deployment Summary for Neural Style Memory Book"
        echo "=================================================="
        echo "🌟 Repository: ${{ github.repository }}"
        echo "🔄 Commit: ${{ github.sha }}"
        echo "👤 Actor: ${{ github.actor }}"
        echo "🌐 Site: https://dnoice.github.io/Neural-Style-Memory-Book/"
        echo ""
        echo "📋 Job Results:"
        echo "  Quality Checks: ${{ needs.quality-checks.result }}"
        echo "  Performance Test: ${{ needs.performance-test.result }}"
        echo "  Deployment: ${{ needs.deploy.result }}"
        echo "  Verification: ${{ needs.verify-deployment.result }}"
        echo ""
        echo "🕐 Completed: $(date -u)"
        
        if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.verify-deployment.result }}" == "success" ]]; then
          echo ""
          echo "🎉 Deployment completed successfully!"
          echo "🚀 Your Neural Style Memory Book is live!"
        fi
